version: '3' 

networks:
  proxy:
    external: true

services:
  traefik:
    container_name: traefik
    hostname: traefik
    image: traefik
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/config/traefik/traefik.toml:/traefik.toml
      - /var/config/traefik/acme.json:/acme.json
      - /var/config/traefik/rules/:/rules/
      - /var/config/traefik/.htpasswd:/.htpasswd:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    environment:
      - TZ=Europe\Amsterdam
    labels:
      - traefik.enable=true
      - traefik.port=8082
      - traefik.frontend.rule=Host:proxy.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  shellinabox:
    container_name: shellinabox
    hostname: shellinabox
    build: ./shellinabox
    image: docker.io/lvlie/shellinabox
    domainname: ${DOMAIN}
    networks:
      - proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.port=4200
      - traefik.frontend.rule=Host:siab.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    image: docker.io/linuxserver/sabnzbd:latest
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "8088:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/sabnzbd/:/config/
      - /srv/cache/incomplete:/incomplete-downloads/
      - /srv/cache/complete:/downloads/
      - /srv/:/data
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
    labels:
      - traefik.enable=true
      - traefik.port=8080
      - traefik.frontend.rule=Host:sab.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  plex:
    container_name: plex
    hostname: plex
    image: docker.io/plexinc/pms-docker:latest
    domainname: ${DOMAIN}
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    volumes: 
      - /etc/localtime:/etc/localtime:ro
      - /var/config/plex/:/config/
      - /var/config/plex/temp/Transcode/:/transcode/
      - /srv/:/data/
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PLEX_UID=800
      - PLEX_GID=1000
      - ADVERTISE_IP="${ADVERTISE_IP}"
  timemachine:
    container_name: timemachine
    hostname: timemachine
    build: ./timemachine
    image: docker.io/lvlie/timemachine
    domainname: ${DOMAIN}
    network_mode: "host"
    volumes: 
      - /etc/localtime:/etc/localtime:ro
      - /srv/backup/:/backup/
    restart: unless-stopped
  tautulli:
    container_name: tautulli
    hostname: tautulli
    image: docker.io/linuxserver/tautulli:latest
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "8181:8181/tcp"
    volumes:
      - /var/config/plexpy/:/config
      - /var/config/plex/Library/Logs/:/logs:ro
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
    labels:
      - traefik.enable=true
      - traefik.port=8181
      - traefik.frontend.rule=Host:plexpy.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  sonarr:
    container_name: sonarr
    hostname: sonarr
    image: docker.io/linuxserver/sonarr:latest
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "8989:8989/tcp"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/sonarr/:/config/
      - /srv/TV/:/tv/
      - /srv/cache/complete:/downloads/
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
    labels:
      - traefik.enable=true
      - traefik.port=8989
      - traefik.frontend.rule=Host:sonarr.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  radarr:
    container_name: radarr
    hostname: radarr
    image: docker.io/linuxserver/radarr:latest
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "7878:7878/tcp"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/radarr/:/config/
      - /srv/Movies/:/movies/
      - /srv/cache/complete:/downloads/
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
    labels:
      - traefik.enable=true
      - traefik.port=7878
      - traefik.frontend.rule=Host:radarr.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  unifi:
    container_name: unifi
    hostname: unifi
    image: docker.io/linuxserver/unifi-controller:latest
    domainname: ${DOMAIN}
    ports:
      - "10001:10001/udp"
      - "8080:8080"
      - "8081:8081"
      - "8443:8443"
      - "8843:8843"
      - "8880:8880"
      - "3478:3478/udp"
      - "6789:6789"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/unifi/:/config
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
  db:
    container_name: db
    hostname: db
    image: mariadb:latest
    domainname: ${DOMAIN}
    ports:
      - "3306:3306"
    volumes:
      - /var/config/mariadb/:/var/lib/mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: "homeassistant"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
  hass:
    container_name: hass
    hostname: hass
    image: docker.io/homeassistant/home-assistant:latest
    domainname: ${DOMAIN}
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/hass/:/config/
    devices:
      - "/dev/ttyACM0:/dev/ttyACM0"
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    restart: unless-stopped
    depends_on:
      - db
      - influx
      - plex
      - sonarr
      - radarr
      - unifi
  duplicati:
    container_name: duplicati
    hostname: duplicati
    image: docker.io/linuxserver/duplicati:latest
    domainname: ${DOMAIN}
    ports:
      - "8200:8200"
    volumes:
      - /var/config/:/backup/var/config/:ro
      - /srv/backup/:/backup/srv/backup/:ro
      - /home/:/backup/home/:ro
      - /var/config/duplicati/:/config
      - /var/srv/cache/duplicati:/temp
    restart: unless-stopped
    environment:
      - TZ=Europe/Amsterdam
      - PUID=800
      - PGID=1000
    privileged: true
  influx:
    container_name: influx
    hostname: influx
    image: influxdb:latest
    domainname: ${DOMAIN}
    ports:
      - "8083:8083"
      - "8086:8086"
      - "8090:8090"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/srv/db/influx/:/var/lib/influxdb
    restart: unless-stopped
  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    domainname: ${DOMAIN}
    networks:
      - proxy
    ports:
      - "3000:3000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/srv/db/grafana/:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - influx
    environment:
      GF_DEFAULT_INSTANCE_NAME: "home"
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_NAME: "home"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_SERVER_DOMAIN: "grafana.${DOMAIN}"
      GF_SERVER_ROOT_URL: "https://grafana.${DOMAIN}"
    labels:
      - traefik.enable=true
      - traefik.port=3000
      - traefik.frontend.rule=Host:grafana.${DOMAIN}
      - traefik.frontend.auth.basic="${HTPW}"
      - traefik.frontend.headers.contentTypeNosniff=true
      - traefik.frontend.headers.forceSTSHeader=true
      - traefik.frontend.headers.STSSeconds=15552000
      - traefik.frontend.headers.STSIncludeSubdomains=true
      - traefik.frontend.headers.STSPreload=true
      - traefik.frontend.headers.isDevelopment=false
  telegraf:
    container_name: telegraf
    hostname: telegraf
    image: telegraf:latest
    domainname: ${DOMAIN}
    network_mode: "host"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/rootfs/proc/:ro
    restart: unless-stopped
    depends_on:
      - influx
    environment:
      HOST_PROC: "/rootfs/proc"
  watchtower:
    container_name: watchtower
    hostname: watchtower
    image: v2tec/watchtower:latest
    domainname: ${DOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 2 * * * *"
    restart: unless-stopped
